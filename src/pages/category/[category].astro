---
import { getCollection } from 'astro:content';
import BlogCategoryFilter from '../../components/BlogCategoryFilter.astro';
import BlogSearch from '../../components/BlogSearch';
import PostCard from '../../components/PostCard.astro';
import { CATEGORIES } from '../../consts';
import Layout from '../../layouts/Layout.astro';
import { preparePostsForSearch } from '../../utils/searchUtils';
import '../../styles/blog-search.css';

export const prerender = false;

export async function getStaticPaths() {
  // Only generate pages for valid categories defined in consts.ts
  return CATEGORIES.map((category) => {
    return {
      params: { category: category.slug },
      props: { categoryName: category.name, categorySlug: category.slug },
    };
  });
}

// Get category from URL params or props
const { category } = Astro.params;
let categoryData = CATEGORIES.find(c => c.slug === category);

// If we're accessing a dynamic route not in our predefined list
if (!categoryData) {
  // Return 404 or redirect to blog
  return Astro.redirect('/blog');
}

const categoryName = categoryData.name;
const categorySlug = categoryData.slug;

// Handle 'all' category
const posts = (await getCollection('blog'))
  .filter(post => {
    if (categorySlug === 'all') return !post.data.draft;
    // Use type assertion for categories to avoid TypeScript error
    return !post.data.draft && post.data.categories && post.data.categories.includes(categorySlug as any);
  })
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Prepare posts for search using our utility function
const searchablePosts = preparePostsForSearch(posts);
console.log(`Prepared ${searchablePosts.length} posts for search in category: ${categorySlug}`);
---

<Layout 
  title={`${categoryName} | PRODBYGUS`} 
  description={`Posts sobre ${categoryName.toLowerCase()}. Compartilhando conhecimento e experiências no mundo da tecnologia.`}
>
  <section class="section-padding">
    <div class="mx-auto max-w-4xl">
      <h1 class="text-gradient mb-8 text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight">
        {categoryName}
      </h1>
      <p class="text-xl mb-10">
        {categorySlug === 'all' 
          ? 'Posts de todas as categorias.' 
          : `Posts sobre ${categoryName.toLowerCase()}.`
        }
      </p>
      
      <!-- Search Bar -->
      <div class="blog-search-wrapper mb-8">
        <BlogSearch client:load posts={searchablePosts} />
        <div class="scanlines"></div>
      </div>
      
      <!-- Category Filter -->
      <BlogCategoryFilter activeCategory={categorySlug} />
    </div>
  </section>

  <section class="mb-16">
    <div class="mx-auto max-w-7xl px-4 lg:px-8">
      <div class="mx-auto max-w-4xl lg:max-w-6xl">
        {posts.length === 0 && (
          <div class="text-center py-12">
            <h2 class="text-xl font-medium mb-4">Nenhum post encontrado</h2>
            <p class="text-[var(--text-muted)]">Não há posts disponíveis nesta categoria no momento.</p>
          </div>
        )}
        
        <!-- Visualização dos posts com suporte a filtros de pesquisa -->
        <div class="mt-12 grid grid-cols-1 gap-16" id="posts-container">
          {posts.map((post) => (
            <div class="post-card project-card bg-surface-5/30 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 border border-[var(--primary)]/10 hover:border-[var(--primary)]/30" data-post-id={post.id} data-post-slug={post.slug}>
              <PostCard post={post} variant="list" />
            </div>
          ))}
        </div>
      </div>
    </div>
  </section>
</Layout> 

<style>
  .section-padding {
    padding: 4rem 1rem;
  }
  
  .text-gradient {
    background-image: linear-gradient(45deg, var(--primary), var(--accent));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 100%;
  }
  
  .project-card {
    position: relative;
    overflow: hidden;
    transition: transform 0.3s ease, opacity 0.3s ease, border-color 0.3s ease, max-height 0.5s ease, margin 0.5s ease;
  }
  
  .project-card:hover {
    transform: translateY(-5px);
  }
  
  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, var(--primary), var(--accent));
    opacity: 0.7;
  }
  
  .blog-search-wrapper {
    position: relative;
    z-index: 10;
    border-radius: 10px;
    overflow: hidden;
  }
  
  /* Estilo para posts filtrados */
  .post-card.search-filtered {
    opacity: 0.3;
    border-color: transparent;
  }
  
  .post-card.search-highlight {
    border-color: var(--accent);
    box-shadow: 0 0 20px rgba(var(--accent-rgb), 0.2);
    animation: highlight-pulse 2s ease-in-out 1;
  }

  /* Animação de destaque para os resultados da busca */
  @keyframes highlight-pulse {
    0% { box-shadow: 0 0 5px rgba(var(--accent-rgb), 0.2); }
    50% { box-shadow: 0 0 25px rgba(var(--accent-rgb), 0.5); }
    100% { box-shadow: 0 0 20px rgba(var(--accent-rgb), 0.2); }
  }
  
  @media (min-width: 768px) {
    .section-padding {
      padding: 6rem 2rem;
    }
  }
</style>

<script>
  // Script para lidar com a filtragem de posts baseada na pesquisa
  document.addEventListener('DOMContentLoaded', () => {
    // Armazenar a ordem original dos posts para restauração
    const originalPostsOrder = [];
    const postsContainer = document.getElementById('posts-container');
    
    // Capturar a ordem original dos posts quando a página carrega
    if (postsContainer) {
      const initialPostCards = postsContainer.querySelectorAll('.post-card');
      initialPostCards.forEach(card => {
        originalPostsOrder.push({
          id: card.getAttribute('data-post-id'),
          element: card
        });
      });
    }
    
    // Função para restaurar a ordem original dos posts
    const restoreOriginalOrder = () => {
      if (!postsContainer) return;
      
      const currentCards = document.querySelectorAll('.post-card');
      // Remover todos os cards atuais
      currentCards.forEach(card => card.remove());
      
      // Readicionar na ordem original
      originalPostsOrder.forEach(item => {
        postsContainer.appendChild(item.element);
      });
    };
    
    // Criar um evento personalizado para escutar os resultados da pesquisa
    window.addEventListener('searchResultsUpdated', (event) => {
      const { detail } = event as CustomEvent;
      if (!detail) return;
      
      const { results, query, hideFiltered } = detail;
      const postCards = document.querySelectorAll('.post-card');
      
      // Se não houver consulta, mostrar todos os posts na ordem original
      if (!query || query.trim().length <= 1) {
        postCards.forEach(card => {
          card.classList.remove('search-filtered', 'search-highlight');
          (card as HTMLElement).style.display = 'block';
        });
        
        // Restaurar a ordem original dos posts
        restoreOriginalOrder();
        
        // Remover mensagem de "nenhum resultado" se existir
        const noResultsMessage = document.getElementById('no-results-message');
        if (noResultsMessage) {
          noResultsMessage.remove();
        }
        
        return;
      }
      
      // Extrair IDs de posts dos resultados
      const matchedPostIds = results.map(result => result.item.id);
      
      // Temporariamente armazenar referências aos posts correspondentes e não correspondentes
      const matchingPosts = [];
      const nonMatchingPosts = [];

      // Classificar os posts em correspondentes e não correspondentes
      postCards.forEach(card => {
        const postId = card.getAttribute('data-post-id');
        
        if (matchedPostIds.includes(postId)) {
          // Este post corresponde à pesquisa
          card.classList.remove('search-filtered');
          card.classList.add('search-highlight');
          (card as HTMLElement).style.display = 'block';
          matchingPosts.push(card);
        } else {
          // Este post não corresponde à pesquisa
          card.classList.add('search-filtered');
          card.classList.remove('search-highlight');
          
          // Se a opção de esconder estiver ativada, esconda completamente
          if (hideFiltered) {
            (card as HTMLElement).style.display = 'none';
          } else {
            (card as HTMLElement).style.display = 'block';
          }
          nonMatchingPosts.push(card);
        }
      });

      // Reordenar os posts no DOM se houver correspondências
      if (matchingPosts.length > 0 && postsContainer) {
        // Remover todos os posts do container
        postCards.forEach(card => card.remove());
        
        // Adicionar primeiro os posts correspondentes
        matchingPosts.forEach(post => {
          postsContainer.appendChild(post);
        });
        
        // Depois adicionar os posts não correspondentes (que estarão ocultos se hideFiltered=true)
        nonMatchingPosts.forEach(post => {
          postsContainer.appendChild(post);
        });
      }
      
      // Verificar se há algum post visível, se não, mostre mensagem
      const visiblePosts = document.querySelectorAll('.post-card:not([style*="display: none"])');
      const noResultsMessage = document.getElementById('no-results-message');
      
      if (visiblePosts.length === 0) {
        // Criar mensagem se não existir
        if (!noResultsMessage) {
          const message = document.createElement('div');
          message.id = 'no-results-message';
          message.className = 'text-center py-12 mt-8';
          message.innerHTML = `
            <h2 class="text-xl font-medium mb-4">Nenhum post encontrado</h2>
            <p class="text-[var(--text-muted)]">Não há posts com título contendo "${query}"</p>
          `;
          
          const container = document.getElementById('posts-container');
          if (container) {
            container.parentNode?.insertBefore(message, container.nextSibling);
          }
        }
      } else if (noResultsMessage) {
        // Remover mensagem se existir e houver posts
        noResultsMessage.remove();
      }
    });
  });
</script> 