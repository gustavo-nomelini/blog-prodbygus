---
/*
  CodeBlock.astro
  A component for displaying code snippets with syntax highlighting and a copy button.
  
  Usage:
  ```
  <CodeBlock language="javascript">
    const foo = 'bar';
    console.log(foo);
  </CodeBlock>
  ```
*/

interface Props {
  language?: string;
  filename?: string;
  highlights?: string; // Line numbers to highlight, e.g. "1,3-5"
  lineNumbers?: boolean;
}

const {
  language = "",
  filename = "",
  highlights = "",
  lineNumbers = true
} = Astro.props;

// Sanitize language for class name
const lang = language ? ` language-${language}` : "";
---

<div class="code-block-wrapper my-6 rounded-lg overflow-hidden">
  {filename && (
    <div class="filename bg-[var(--surface-highlight)] px-4 py-2 text-sm font-mono text-[var(--highlight)] border-b border-[var(--border)]">
      {filename}
    </div>
  )}
  
  <div class="relative group">
    <pre class={`${lineNumbers ? 'line-numbers' : ''} rounded-b-lg overflow-x-auto`}><code class={`${lang}`}><slot /></code></pre>
    
    <button
      class="copy-button absolute top-2 right-2 bg-[var(--surface-highlight)] text-[var(--highlight)] text-sm px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-[var(--surface-highlight-hover)] focus:outline-none focus:ring-2 focus:ring-[var(--primary)]"
      aria-label="Copy code to clipboard"
      data-copy-state="copy"
    >
      <span class="copy-text">Copy</span>
    </button>
  </div>
</div>

<script>
  // Initialize copy buttons after DOM content is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-button');

    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const buttonEl = button as HTMLButtonElement;
        const textEl = buttonEl.querySelector('.copy-text') as HTMLElement;
        const currentState = buttonEl.dataset.copyState;
        
        // Find the code element to copy
        const codeEl = buttonEl.closest('.code-block-wrapper')?.querySelector('code');
        
        if (!codeEl) return;
        
        // Get the text content to copy
        const textToCopy = codeEl.textContent || '';
        
        try {
          await navigator.clipboard.writeText(textToCopy);
          
          // Update button state to show success
          buttonEl.dataset.copyState = 'copied';
          textEl.textContent = 'Copied!';
          buttonEl.classList.remove('bg-[var(--surface-highlight)]');
          buttonEl.classList.add('bg-green-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            buttonEl.dataset.copyState = 'copy';
            textEl.textContent = 'Copy';
            buttonEl.classList.remove('bg-green-700');
            buttonEl.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
          
          // Show error state
          buttonEl.dataset.copyState = 'error';
          textEl.textContent = 'Error!';
          buttonEl.classList.remove('bg-[var(--surface-highlight)]');
          buttonEl.classList.add('bg-red-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            buttonEl.dataset.copyState = 'copy';
            textEl.textContent = 'Copy';
            buttonEl.classList.remove('bg-red-700');
            buttonEl.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        }
      });
    });
  });
</script>

<style is:global>
  /* Base styling for code blocks */
  .code-block-wrapper {
    margin: 1.5rem 0;
    position: relative;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Dark theme styling for code blocks */
  .code-block-wrapper pre {
    background-color: var(--surface);
    padding: 1rem;
    margin: 0;
    overflow-x: auto;
  }

  .code-block-wrapper code {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875rem;
    line-height: 1.7;
    tab-size: 2;
  }

  /* Line numbers */
  .line-numbers .line-numbers-rows {
    position: absolute;
    pointer-events: none;
    top: 1rem;
    left: 0.75rem;
    width: 2rem;
    font-size: 0.875rem;
    letter-spacing: -1px;
    user-select: none;
    counter-reset: linenumber;
  }

  .line-numbers-rows > span {
    display: block;
    counter-increment: linenumber;
  }

  .line-numbers-rows > span:before {
    content: counter(linenumber);
    display: block;
    padding-right: 0.8rem;
    text-align: right;
    color: rgba(255, 255, 255, 0.3);
  }
</style> 