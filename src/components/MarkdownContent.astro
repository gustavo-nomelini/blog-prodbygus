---
import { Image } from 'astro:assets';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`prose prose-lg prose-invert 
  prose-headings:text-[var(--primary)] 
  prose-h2:mt-16 prose-h2:text-pretty prose-h2:text-3xl prose-h2:font-semibold prose-h2:tracking-tight
  prose-a:text-[var(--accent)] 
  prose-strong:text-[var(--highlight)]
  prose-code:text-[var(--highlight)] prose-pre:bg-transparent prose-pre:p-0
  prose-blockquote:border-l-[var(--primary)] prose-blockquote:bg-surface-10 prose-blockquote:p-4 prose-blockquote:rounded-r-md
  prose-img:rounded-xl prose-img:shadow-md 
  prose-li:marker:text-[var(--primary)]
  ${className}`}>
  <slot />
</div>

<script>
  // Process images after DOM loads
  document.addEventListener('DOMContentLoaded', () => {
    // Select all images in Markdown content
    const contentImages = document.querySelectorAll('.prose img');
    
    // Add attributes for optimized loading
    contentImages.forEach(img => {
      // Ensure img is an HTMLImageElement
      if (img instanceof HTMLImageElement) {
        // Add lazy loading if not defined
        if (!img.hasAttribute('loading')) {
          img.setAttribute('loading', 'lazy');
        }
        
        // Add async decoding
        if (!img.hasAttribute('decoding')) {
          img.setAttribute('decoding', 'async');
        }
        
        // Add styling class
        img.classList.add('rounded-xl', 'shadow-md');
        
        // Try to add width and height if not defined
        // to avoid layout shifts
        if (!img.hasAttribute('width') && !img.hasAttribute('height')) {
          img.addEventListener('load', () => {
            // On first load, set width and height based on what was loaded
            if (img.naturalWidth && img.naturalHeight) {
              img.setAttribute('width', img.naturalWidth.toString());
              img.setAttribute('height', img.naturalHeight.toString());
            }
          });
        }
      }
    });

    // Add copy button functionality to code blocks created by rehype-pretty-code
    const preElements = document.querySelectorAll('.prose pre');
    
    preElements.forEach(pre => {
      // Ensure pre element is not already wrapped (avoid double processing)
      if (pre.parentElement && pre.parentElement.classList.contains('code-block-wrapper')) {
        return;
      }
      
      // Create copy button
      const copyButton = document.createElement('button');
      copyButton.className = 'copy-button absolute top-2 right-2 bg-[var(--surface-highlight)] text-[var(--highlight)] text-xs px-2 py-1 rounded opacity-0 hover:opacity-100 focus:opacity-100 transition-opacity duration-200 hover:bg-[var(--primary)]/30 focus:outline-none focus:ring-2 focus:ring-[var(--primary)]';
      copyButton.setAttribute('aria-label', 'Copy code to clipboard');
      copyButton.setAttribute('data-copy-state', 'copy');
      
      const buttonText = document.createElement('span');
      buttonText.className = 'copy-text';
      buttonText.textContent = 'Copy';
      copyButton.appendChild(buttonText);
      
      // Setup the copy function
      copyButton.addEventListener('click', async () => {
        const code = pre.querySelector('code');
        if (!code) return;
        
        const textToCopy = code.textContent || '';
        
        try {
          await navigator.clipboard.writeText(textToCopy);
          
          // Update button state to show success
          copyButton.dataset.copyState = 'copied';
          buttonText.textContent = 'Copied!';
          copyButton.classList.remove('bg-[var(--surface-highlight)]');
          copyButton.classList.add('bg-green-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyButton.dataset.copyState = 'copy';
            buttonText.textContent = 'Copy';
            copyButton.classList.remove('bg-green-700');
            copyButton.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
          
          // Show error state
          copyButton.dataset.copyState = 'error';
          buttonText.textContent = 'Error!';
          copyButton.classList.remove('bg-[var(--surface-highlight)]');
          copyButton.classList.add('bg-red-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyButton.dataset.copyState = 'copy';
            buttonText.textContent = 'Copy';
            copyButton.classList.remove('bg-red-700');
            copyButton.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        }
      });
      
      // Add position relative to pre if not already applied
      if (window.getComputedStyle(pre).position !== 'relative') {
        pre.style.position = 'relative';
      }
      
      // Add copy button to pre
      pre.appendChild(copyButton);
    });
  });
</script>

<style is:global>
  /* Styling for code blocks with enhanced appearance */
  .code-block-wrapper {
    margin: 2rem 0;
    position: relative;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    box-shadow: 
      0 4px 8px rgba(0, 0, 0, 0.2),
      0 0 15px rgba(var(--primary-rgb), 0.1);
    background: var(--surface);
    overflow: hidden;
  }
  
  /* Add a subtle glow effect on hover */
  .code-block-wrapper:hover {
    border-color: rgba(var(--primary-rgb), 0.3);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.25),
      0 0 20px rgba(var(--primary-rgb), 0.2);
    transition: all 0.3s ease;
  }
  
  /* Code title styling */
  .code-title {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.8rem;
    padding: 0.5rem 1rem;
    color: var(--text-muted);
    border-bottom: 1px solid rgba(var(--primary-rgb), 0.3);
    background-color: rgba(var(--primary-rgb), 0.05);
  }
  
  /* Code container styling */
  .prose pre {
    background-color: transparent;
    padding: 1.25rem;
    margin: 0;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.6;
    position: relative;
    border-radius: 0.5rem;
    border: 2px solid rgba(255, 255, 255, 0.1);
    box-shadow: 
      0 4px 8px rgba(0, 0, 0, 0.2),
      0 0 15px rgba(var(--primary-rgb), 0.1);
  }
  
  .prose pre:hover {
    border-color: rgba(var(--primary-rgb), 0.3);
    box-shadow: 
      0 4px 12px rgba(0, 0, 0, 0.25),
      0 0 20px rgba(var(--primary-rgb), 0.2);
    transition: all 0.3s ease;
  }
  
  /* Add a cyberpunk-style decoration to the code blocks */
  .prose pre::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: linear-gradient(
      to right,
      var(--primary),
      var(--accent),
      var(--primary)
    );
    opacity: 0.8;
  }
  
  /* Apply styling for line numbers */
  code[data-line-numbers] {
    counter-reset: line;
  }
  
  code[data-line-numbers] > [data-line]::before {
    counter-increment: line;
    content: counter(line);
    display: inline-block;
    width: 1.5rem;
    margin-right: 1.5rem;
    text-align: right;
    color: rgba(255, 255, 255, 0.3);
    font-size: 0.8rem;
  }
  
  /* Adjust spacing for larger number of lines */
  code[data-line-numbers-max-digits="2"] > [data-line]::before {
    width: 2rem;
  }
  
  code[data-line-numbers-max-digits="3"] > [data-line]::before {
    width: 2.5rem;
  }
  
  code[data-line-numbers-max-digits="4"] > [data-line]::before {
    width: 3rem;
  }
  
  /* Line styling */
  .code-line {
    display: block;
    padding: 0 1rem;
    border-left: 2px solid transparent;
  }
  
  /* Highlighted line styling with animation */
  .highlighted-line {
    background-color: rgba(var(--primary-rgb), 0.1);
    border-left: 2px solid var(--primary);
  }
  
  /* Highlighted character styling */
  .highlighted-chars {
    background-color: rgba(var(--accent-rgb), 0.2);
    border-radius: 0.25rem;
    padding: 0.05rem 0;
    margin: 0 -0.15rem;
    border: 1px solid rgba(var(--accent-rgb), 0.3);
  }
  
  /* Add a faint border to indicate the active code section */
  [data-rehype-pretty-code-fragment] {
    position: relative;
  }
  
  /* Styling for inline code with language support */
  :not(pre) > code[data-rehype-pretty-code-fragment] {
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 0.875em;
    background-color: rgba(var(--primary-rgb), 0.1);
    border-radius: 3px;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    border: 1px solid rgba(var(--primary-rgb), 0.2);
  }
  
  /* Enhanced styling for inline code with language annotations */
  p > code[data-language],
  li > code[data-language],
  td > code[data-language],
  h1 > code[data-language],
  h2 > code[data-language],
  h3 > code[data-language],
  h4 > code[data-language],
  h5 > code[data-language],
  h6 > code[data-language] {
    position: relative;
    padding: 0.2rem 0.4rem;
    margin: 0 0.1rem;
    background-color: rgba(var(--primary-rgb), 0.1);
    border: 1px solid rgba(var(--primary-rgb), 0.2);
    border-radius: 0.25rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.85em;
    color: var(--highlight);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }
  
  /* Hover effect for language-annotated inline code */
  p > code[data-language]:hover,
  li > code[data-language]:hover,
  td > code[data-language]:hover,
  h1 > code[data-language]:hover,
  h2 > code[data-language]:hover,
  h3 > code[data-language]:hover,
  h4 > code[data-language]:hover,
  h5 > code[data-language]:hover,
  h6 > code[data-language]:hover {
    background-color: rgba(var(--primary-rgb), 0.15);
    border-color: rgba(var(--primary-rgb), 0.3);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
  
  /* Language badge for inline code */
  code[data-language]::after {
    content: attr(data-language);
    position: absolute;
    top: -0.6rem;
    right: 0.4rem;
    font-size: 0.6rem;
    font-weight: bold;
    color: var(--primary);
    background-color: rgba(var(--background-rgb), 0.8);
    padding: 0 0.2rem;
    border-radius: 0.2rem;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  /* Show language badge on hover */
  code[data-language]:hover::after {
    opacity: 1;
  }
  
  /* Language badge styling */
  div[data-rehype-pretty-code-title] {
    display: flex;
    align-items: center;
    padding: 0.5rem 1rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.8rem;
    color: var(--text-muted);
    background-color: rgba(0, 0, 0, 0.3);
    border-bottom: 1px solid rgba(var(--primary-rgb), 0.2);
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
  }
  
  /* Additional styling for ID-based highlights */
  .highlighted-chars[data-chars-id="v"] {
    background-color: rgba(var(--primary-rgb), 0.15);
    border-color: rgba(var(--primary-rgb), 0.3);
  }
  
  .highlighted-chars[data-chars-id="c"] {
    background-color: rgba(255, 183, 77, 0.2);
    border-color: rgba(255, 183, 77, 0.3);
  }
  
  .highlighted-chars[data-chars-id="f"] {
    background-color: rgba(132, 94, 247, 0.2);
    border-color: rgba(132, 94, 247, 0.3);
  }
  
  .highlighted-chars[data-chars-id="r"] {
    background-color: rgba(255, 107, 107, 0.2);
    border-color: rgba(255, 107, 107, 0.3);
  }
  
  /* Styling for line highlights with IDs */
  .code-line[data-highlighted-line-id="imports"] {
    background-color: rgba(132, 94, 247, 0.1);
    border-left-color: rgba(132, 94, 247, 0.7);
  }
  
  .code-line[data-highlighted-line-id="interface"] {
    background-color: rgba(var(--primary-rgb), 0.1);
    border-left-color: var(--primary);
  }
  
  .code-line[data-highlighted-line-id="methods"] {
    background-color: rgba(255, 183, 77, 0.1);
    border-left-color: rgba(255, 183, 77, 0.7);
  }
</style> 