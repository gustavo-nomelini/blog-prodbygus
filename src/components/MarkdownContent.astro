---
import { Image } from 'astro:assets';

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`prose prose-lg prose-invert 
  prose-headings:text-[var(--primary)] 
  prose-h2:mt-16 prose-h2:text-pretty prose-h2:text-3xl prose-h2:font-semibold prose-h2:tracking-tight
  prose-a:text-[var(--accent)] 
  prose-strong:text-[var(--highlight)]
  prose-code:text-[var(--highlight)] prose-pre:bg-transparent prose-pre:p-0
  prose-blockquote:border-l-[var(--primary)] prose-blockquote:bg-surface-10 prose-blockquote:p-4 prose-blockquote:rounded-r-md
  prose-img:rounded-xl prose-img:shadow-md 
  prose-li:marker:text-[var(--primary)]
  ${className}`}>
  <slot />
</div>

<script>
  // Script para processar imagens após o carregamento do DOM
  document.addEventListener('DOMContentLoaded', () => {
    // Seleciona todas as imagens dentro do conteúdo Markdown
    const contentImages = document.querySelectorAll('.prose img');
    
    // Adiciona atributos para carregamento otimizado
    contentImages.forEach(img => {
      // Garantir que img é um HTMLImageElement
      if (img instanceof HTMLImageElement) {
        // Adiciona lazy loading se não estiver definido
        if (!img.hasAttribute('loading')) {
          img.setAttribute('loading', 'lazy');
        }
        
        // Adiciona decodificação assíncrona
        if (!img.hasAttribute('decoding')) {
          img.setAttribute('decoding', 'async');
        }
        
        // Adiciona classe para estilização
        img.classList.add('rounded-xl', 'shadow-md');
        
        // Tenta adicionar width e height se não estiverem definidos
        // para evitar layout shifts
        if (!img.hasAttribute('width') && !img.hasAttribute('height')) {
          img.addEventListener('load', () => {
            // Na primeira carga, definir width e height baseado no que foi carregado
            if (img.naturalWidth && img.naturalHeight) {
              img.setAttribute('width', img.naturalWidth.toString());
              img.setAttribute('height', img.naturalHeight.toString());
            }
          });
        }
      }
    });

    // Enhance code blocks with copy buttons
    const preElements = document.querySelectorAll('.prose pre');
    
    preElements.forEach(pre => {
      // Create the wrapper div
      const wrapper = document.createElement('div');
      wrapper.className = 'code-block-wrapper my-6 rounded-lg overflow-hidden';
      
      // Create the button container
      const buttonContainer = document.createElement('div');
      buttonContainer.className = 'relative group';
      
      // Create the copy button
      const copyButton = document.createElement('button');
      copyButton.className = 'copy-button absolute top-2 right-2 bg-[var(--surface-highlight)] text-[var(--highlight)] text-sm px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-[var(--primary)]';
      copyButton.setAttribute('aria-label', 'Copy code to clipboard');
      copyButton.setAttribute('data-copy-state', 'copy');
      
      const buttonText = document.createElement('span');
      buttonText.className = 'copy-text';
      buttonText.textContent = 'Copy';
      copyButton.appendChild(buttonText);
      
      // Setup the copy function
      copyButton.addEventListener('click', async () => {
        const code = pre.querySelector('code');
        if (!code) return;
        
        const textToCopy = code.textContent || '';
        
        try {
          await navigator.clipboard.writeText(textToCopy);
          
          // Update button state to show success
          copyButton.dataset.copyState = 'copied';
          buttonText.textContent = 'Copied!';
          copyButton.classList.remove('bg-[var(--surface-highlight)]');
          copyButton.classList.add('bg-green-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyButton.dataset.copyState = 'copy';
            buttonText.textContent = 'Copy';
            copyButton.classList.remove('bg-green-700');
            copyButton.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
          
          // Show error state
          copyButton.dataset.copyState = 'error';
          buttonText.textContent = 'Error!';
          copyButton.classList.remove('bg-[var(--surface-highlight)]');
          copyButton.classList.add('bg-red-700');
          
          // Reset after 2 seconds
          setTimeout(() => {
            copyButton.dataset.copyState = 'copy';
            buttonText.textContent = 'Copy';
            copyButton.classList.remove('bg-red-700');
            copyButton.classList.add('bg-[var(--surface-highlight)]');
          }, 2000);
        }
      });
      
      // Replace the original pre element with our enhanced version
      const parent = pre.parentNode;
      if (parent) {
        // Wrap pre in the button container and add the copy button
        buttonContainer.appendChild(pre.cloneNode(true));
        buttonContainer.appendChild(copyButton);
        
        // Add everything to the wrapper
        wrapper.appendChild(buttonContainer);
        
        // Replace the original pre with our enhanced version
        parent.replaceChild(wrapper, pre);
      }
    });
  });
</script>

<style is:global>
  /* Styling for code blocks */
  .code-block-wrapper {
    margin: 1.5rem 0;
    position: relative;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .code-block-wrapper pre {
    background-color: var(--surface);
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 0;
    overflow-x: auto;
  }
  
  /* Highlighting styles */
  .highlighted-line {
    background-color: rgba(200, 200, 255, 0.1);
    border-left: 2px solid var(--primary);
    padding-left: 6px;
    display: block;
  }
  
  .highlighted-word {
    background-color: rgba(200, 200, 255, 0.15);
    padding: 0.1rem 0.2rem;
    border-radius: 0.25rem;
  }
</style> 