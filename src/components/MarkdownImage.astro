---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

// Importar todas as imagens locais da pasta de ativos
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/images/**/*.{jpeg,jpg,png,gif,webp,avif}');

interface Props {
  src: string;
  alt?: string;
  width?: number | string;
  height?: number | string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  class?: string;
}

const { 
  src, 
  alt = '', 
  width = 800, 
  height = 600,
  loading = 'lazy',
  decoding = 'async',
  class: className = '' 
} = Astro.props;

// Converter width e height para números se forem strings
const widthNum = typeof width === 'string' ? parseInt(width) : width;
const heightNum = typeof height === 'string' ? parseInt(height) : height;

// Verificar se a imagem é local ou remota
const isLocalImage = src.startsWith('/src/assets/');
const imageKey = isLocalImage ? src : null;

// Verificar se é uma URL absoluta
const isExternalUrl = src.match(/^(https?:\/\/|\/\/)/i);

const optimizedSrc = isExternalUrl ? src : imageKey;
---

{isLocalImage && imageKey && images[imageKey] ? (
  <Image 
    src={images[imageKey]()}
    alt={alt} 
    width={widthNum}
    height={heightNum}
    loading={loading}
    decoding={decoding}
    class={className}
    format="webp"
    quality={80}
  />
) : (
  <img 
    src={optimizedSrc || src} 
    alt={alt} 
    width={widthNum} 
    height={heightNum}
    loading={loading}
    decoding={decoding}
    class={`rounded-md ${className}`}
  />
)} 