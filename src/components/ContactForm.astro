---
// Props para o formulário, se necessário
---

<form id="contact-form" class="space-y-6">
  <div>
    <label
      for="name"
      class="block text-sm font-medium text-[var(--foreground-muted)] mb-2"
    >
      Nome<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <input
      type="text"
      id="name"
      name="name"
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="Seu nome completo"
    />
  </div>

  <div>
    <label
      for="email"
      class="block text-sm font-medium text-[var(--foreground-muted)] mb-2"
    >
      Email<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="seu.email@exemplo.com"
    />
  </div>

  <div>
    <label
      for="phone"
      class="block text-sm font-medium text-[var(--foreground-muted)] mb-2"
    >
      Telefone{' '}
      <span class="text-[var(--foreground-muted)] text-xs">
        (opcional)
      </span>
    </label>
    <input
      type="tel"
      id="phone"
      name="phone"
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="(XX) XXXXX-XXXX"
    />
  </div>

  <div>
    <label
      for="message"
      class="block text-sm font-medium text-[var(--foreground-muted)] mb-2"
    >
      Mensagem<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <textarea
      id="message"
      name="message"
      rows={5}
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)] resize-none"
      placeholder="Digite sua mensagem aqui..."
    ></textarea>
  </div>

  <!-- Feedback de status - inicialmente escondido -->
  <div 
    id="form-success" 
    class="p-4 rounded-md bg-green-50 text-green-800 border border-green-200 hidden"
  >
    Mensagem enviada com sucesso! Entrarei em contato em breve.
    <div class="w-full bg-gray-200 h-1 mt-2 rounded overflow-hidden">
      <div
        class="bg-green-500 h-1 animate-shrink-width"
        style="animation: shrink-width 10s linear forwards;"
      ></div>
    </div>
  </div>

  <div 
    id="form-error" 
    class="p-4 rounded-md bg-red-50 text-red-800 border border-red-200 hidden"
  >
    Ocorreu um erro ao enviar a mensagem. Por favor, tente novamente.
  </div>

  <div>
    <button
      type="submit"
      id="submit-button"
      class="w-full px-6 py-4 rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-[var(--color1)] focus:ring-offset-2 focus:ring-offset-[var(--color4)] bg-[var(--color1)] text-[var(--background)] hover:bg-[var(--color3)]"
    >
      Enviar Mensagem
    </button>
  </div>

  <div class="text-xs text-[var(--foreground-muted)] text-center">
    Campos com <span class="text-[var(--color1)] ml-1">*</span> são obrigatórios
  </div>
</form>

<style>
  @keyframes shrink-width {
    from { width: 100%; }
    to { width: 0%; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const successMessage = document.getElementById('form-success');
    const errorMessage = document.getElementById('form-error');

    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Reset messages
        successMessage?.classList.add('hidden');
        errorMessage?.classList.add('hidden');
        
        // Disable button and change text
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Enviando...';
          submitButton.classList.remove('bg-[var(--color1)]', 'hover:bg-[var(--color3)]');
          submitButton.classList.add('bg-[var(--color2)]', 'text-[var(--foreground-muted)]', 'cursor-not-allowed');
        }

        // Get form data
        const formData = new FormData(form);

        try {
          const response = await fetch('/api/contact', {
            method: 'POST',
            body: formData,
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.error || 'Ocorreu um erro ao enviar a mensagem');
          }

          // Show success message
          successMessage?.classList.remove('hidden');
          
          // Reset form
          form.reset();
          
          // Hide success message after 10 seconds
          setTimeout(() => {
            successMessage?.classList.add('hidden');
          }, 10000);
        } catch (error) {
          // Show error message
          if (errorMessage) {
            errorMessage.textContent = error instanceof Error 
              ? error.message 
              : 'Ocorreu um erro ao enviar a mensagem';
            errorMessage.classList.remove('hidden');
          }
        } finally {
          // Re-enable button
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = 'Enviar Mensagem';
            submitButton.classList.add('bg-[var(--color1)]', 'hover:bg-[var(--color3)]');
            submitButton.classList.remove('bg-[var(--color2)]', 'text-[var(--foreground-muted)]', 'cursor-not-allowed');
          }
        }
      });
    }
  });
</script> 