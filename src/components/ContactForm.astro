---
// Props para o formulário, se necessário
---

<form id="contactForm" class="space-y-6">
  <div>
    <label for="name" class="block text-sm font-medium text-[var(--foreground-muted)] mb-2">
      Nome<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <input
      type="text"
      id="name"
      name="name"
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="Seu nome completo"
    />
  </div>
  
  <div>
    <label for="email" class="block text-sm font-medium text-[var(--foreground-muted)] mb-2">
      Email<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="seu.email@exemplo.com"
    />
  </div>
  
  <div>
    <label for="phone" class="block text-sm font-medium text-[var(--foreground-muted)] mb-2">
      Telefone <span class="text-[var(--foreground-muted)] text-xs">(opcional)</span>
    </label>
    <input
      type="tel"
      id="phone"
      name="phone"
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)]"
      placeholder="(XX) XXXXX-XXXX"
    />
  </div>
  
  <div>
    <label for="message" class="block text-sm font-medium text-[var(--foreground-muted)] mb-2">
      Mensagem<span class="text-[var(--color1)] ml-1">*</span>
    </label>
    <textarea
      id="message"
      name="message"
      rows="5"
      required
      class="w-full px-4 py-3 bg-[var(--background)] border border-[var(--color2)] rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--color1)] text-[var(--foreground)] resize-none"
      placeholder="Digite sua mensagem aqui..."
    ></textarea>
  </div>
  
  <!-- Feedback de status - será mostrado dinamicamente via JavaScript -->
  <div id="formStatus" class="hidden p-4 rounded-md"></div>
  
  <div>
    <button
      type="submit"
      id="submitButton"
      class="w-full px-6 py-4 rounded-md font-medium bg-[var(--color1)] text-[var(--background)] hover:bg-[var(--color3)] transition-colors focus:outline-none focus:ring-2 focus:ring-[var(--color1)] focus:ring-offset-2 focus:ring-offset-[var(--color4)]"
    >
      Enviar Mensagem
    </button>
  </div>
  
  <div class="text-xs text-[var(--foreground-muted)] text-center">
    Campos com <span class="text-[var(--color1)]">*</span> são obrigatórios
  </div>
</form>

<script>
  // Script para manipular o envio do formulário
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const submitButton = document.getElementById('submitButton') as HTMLButtonElement;
    const formStatus = document.getElementById('formStatus') as HTMLDivElement;
    
    if (form && submitButton && formStatus) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Alterar estado do botão
        submitButton.disabled = true;
        submitButton.innerText = 'Enviando...';
        submitButton.classList.add('bg-[var(--color2)]', 'text-[var(--foreground-muted)]', 'cursor-not-allowed');
        submitButton.classList.remove('bg-[var(--color1)]', 'hover:bg-[var(--color3)]');
        
        // Esconder mensagem de status anterior
        formStatus.classList.add('hidden');
        
        // Coletar dados do formulário
        const formData = new FormData(form);
        
        try {
          // Enviar dados para a API
          const response = await fetch('/api/contact', {
            method: 'POST',
            body: formData,
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Mostrar mensagem de sucesso
            formStatus.innerHTML = `
              <div>${result.message || 'Mensagem enviada com sucesso! Entraremos em contato em breve.'}</div>
              <div class="w-full bg-gray-200 h-1 mt-2 rounded overflow-hidden">
                <div class="bg-green-500 h-1 animate-shrink-width"></div>
              </div>
            `;
            formStatus.classList.remove('hidden', 'bg-red-50', 'text-red-800', 'border-red-200');
            formStatus.classList.add('bg-green-50', 'text-green-800', 'border', 'border-green-200');
            
            // Limpar formulário
            form.reset();
            
            // Esconder a mensagem após 10 segundos
            setTimeout(() => {
              formStatus.classList.add('hidden');
            }, 10000);
          } else {
            throw new Error(result.message || 'Erro no envio');
          }
          
        } catch (error) {
          console.error('Erro ao enviar formulário:', error);
          
          // Mostrar mensagem de erro
          formStatus.innerHTML = error instanceof Error 
            ? error.message 
            : 'Ocorreu um erro ao enviar a mensagem. Por favor, tente novamente.';
          
          formStatus.classList.remove('hidden', 'bg-green-50', 'text-green-800', 'border-green-200');
          formStatus.classList.add('bg-red-50', 'text-red-800', 'border', 'border-red-200');
        } finally {
          // Restaurar estado do botão
          submitButton.disabled = false;
          submitButton.innerText = 'Enviar Mensagem';
          submitButton.classList.remove('bg-[var(--color2)]', 'text-[var(--foreground-muted)]', 'cursor-not-allowed');
          submitButton.classList.add('bg-[var(--color1)]', 'hover:bg-[var(--color3)]');
        }
      });
    }
  });
</script> 