---
interface Props {
  title: string;
  skills: string[] | string[][];
  iconName?: string;
  color?: string;
}

const {
  title,
  skills,
  iconName,
  color = 'var(--primary)',
} = Astro.props;

// Get icon character/symbol based on the type
const getIconSymbol = () => {
  if (iconName?.includes('paint-brush')) return '🎨';
  if (iconName?.includes('code')) return '💻';
  if (iconName?.includes('database')) return '🗄️';
  return '✨'; // Default
};

// Helper function to check if skills are grouped
const isGroupedSkills = (skills: string[] | string[][]): skills is string[][] => {
  return Array.isArray(skills[0]);
};
---

<div class="cyber-skill-card relative overflow-hidden" data-color={color}>
  {/* Border scan effect */}
  <div class="scan-effect absolute top-0 w-10 h-full bg-gradient-to-r from-transparent via-white to-transparent opacity-30" />

  <div class="backdrop-blur-sm bg-[var(--surface)]/30 border border-[var(--surface)] rounded-lg p-6 relative">
    {/* Animated background */}
    <div class="animated-background absolute inset-0 rounded-lg z-0" />

    {/* Corner accents */}
    <div class="corner-accent absolute top-0 left-0 w-3 h-3 border-l-2 border-t-2" />
    <div class="corner-accent absolute top-0 right-0 w-3 h-3 border-r-2 border-t-2" />
    <div class="corner-accent absolute bottom-0 left-0 w-3 h-3 border-l-2 border-b-2" />
    <div class="corner-accent absolute bottom-0 right-0 w-3 h-3 border-r-2 border-b-2" />

    {/* Title with icon */}
    <div class="title-container text-lg font-medium mb-4 flex items-center relative z-10">
      <span
        class="w-6 h-6 rounded-full flex items-center justify-center text-xs text-[var(--background)] mr-2"
        style={{ background: `linear-gradient(135deg, ${color}, var(--accent))` }}
      >
        {getIconSymbol()}
      </span>

      {/* Container for the main text and glitch effects */}
      <div class="relative">
        {/* Glitch effects stay behind */}
        <span class="glitch-effect absolute -left-[1px] -top-[1px] opacity-70 blur-[0.5px]" style={{ color: 'var(--accent)', zIndex: 1 }}>
          {title}
        </span>
        <span class="glitch-effect absolute -right-[1px] -bottom-[1px] opacity-70 blur-[0.5px]" style={{ color: 'var(--secondary)', zIndex: 1 }}>
          {title}
        </span>
        {/* Main text always in foreground */}
        <span class="relative" style={{ color: 'var(--text)', zIndex: 2 }}>
          {title}
        </span>
      </div>
    </div>

    {/* Skills grid */}
    <div class="skills-container space-y-2 relative z-10">
      {isGroupedSkills(skills) ? (
        // Grouped skills
        skills.map((lineSkills) => (
          <div class="flex flex-wrap gap-2">
            {lineSkills.map((skill) => (
              <div class="skill-badge" data-skill={skill}>
                <span class="skill-text text-sm font-medium">{skill}</span>
                <div class="skill-glow absolute inset-0 opacity-20 z-0" />
              </div>
            ))}
          </div>
        ))
      ) : (
        // Simple array of skills
        <div class="flex flex-wrap gap-2">
          {skills.map((skill) => (
            <div class="skill-badge" data-skill={skill}>
              <span class="skill-text text-sm font-medium">{skill}</span>
              <div class="skill-glow absolute inset-0 opacity-20 z-0" />
            </div>
          ))}
        </div>
      )}
    </div>
  </div>
</div>

<style>
  .cyber-skill-card {
    opacity: 0;
    animation: fade-in 0.5s ease-out forwards;
  }

  .scan-effect {
    animation: scan 2s linear infinite;
  }

  .animated-background {
    background: linear-gradient(
      45deg,
      rgba(var(--primary-rgb), 0.1),
      rgba(var(--accent-rgb), 0.1)
    );
    animation: shimmer 3s ease-in-out infinite;
  }

  .corner-accent {
    border-color: var(--accent);
    opacity: 0.7;
  }

  .skill-badge {
    position: relative;
    padding: 0.25rem 0.75rem;
    background: rgba(var(--primary-rgb), 0.1);
    border: 1px solid rgba(var(--primary-rgb), 0.2);
    border-radius: var(--border-radius-sm);
    transition: all 0.3s ease;
  }

  .skill-badge:hover {
    transform: translateY(-2px);
    background: rgba(var(--primary-rgb), 0.2);
  }

  .skill-badge:hover .skill-glow {
    opacity: 0.4;
  }

  .skill-text {
    position: relative;
    z-index: 1;
    color: var(--text);
  }

  .skill-glow {
    background: linear-gradient(
      45deg,
      rgba(var(--primary-rgb), 0.3),
      rgba(var(--accent-rgb), 0.3)
    );
    border-radius: var(--border-radius-sm);
    transition: opacity 0.3s ease;
  }

  @keyframes scan {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(100%);
    }
  }

  @keyframes shimmer {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const cards = document.querySelectorAll('.cyber-skill-card');
    
    cards.forEach((card) => {
      const color = card.getAttribute('data-color');
      if (!color) return;
      
      // Set CSS variables
      (card as HTMLElement).style.setProperty('--color', color);
      
      // Intersection Observer for card animation
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              card.classList.add('visible');
              
              // Animate skill badges with a delay
              const skillBadges = card.querySelectorAll('.skill-badge');
              skillBadges.forEach((badge, index) => {
                setTimeout(() => {
                  badge.classList.add('visible');
                }, index * 100);
              });
            }
          });
        },
        { threshold: 0.2 }
      );
      
      observer.observe(card);

      // Add hover effects
      card.addEventListener('mouseenter', () => {
        const scanEffect = card.querySelector('.scan-effect') as HTMLElement;
        const animatedBackground = card.querySelector('.animated-background') as HTMLElement;
        const titleContainer = card.querySelector('.title-container') as HTMLElement;
        const glitchEffects = card.querySelectorAll('.glitch-effect');

        if (scanEffect) {
          scanEffect.style.left = '105%';
        }

        if (animatedBackground) {
          animatedBackground.style.background = `radial-gradient(circle at center, ${color}30, transparent 70%)`;
        }

        if (titleContainer) {
          titleContainer.style.transform = 'translateX(-2px)';
        }

        glitchEffects.forEach((effect) => {
          effect.classList.remove('hidden');
        });
      });

      card.addEventListener('mouseleave', () => {
        const scanEffect = card.querySelector('.scan-effect') as HTMLElement;
        const animatedBackground = card.querySelector('.animated-background') as HTMLElement;
        const titleContainer = card.querySelector('.title-container') as HTMLElement;
        const glitchEffects = card.querySelectorAll('.glitch-effect');

        if (scanEffect) {
          scanEffect.style.left = '-5%';
        }

        if (animatedBackground) {
          animatedBackground.style.background = `radial-gradient(circle at center, ${color}15, transparent 60%)`;
        }

        if (titleContainer) {
          titleContainer.style.transform = 'translateX(0)';
        }

        glitchEffects.forEach((effect) => {
          effect.classList.add('hidden');
        });
      });
    });
  });
</script> 