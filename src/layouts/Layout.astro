---
import BaseHead from '../components/BaseHead.astro';
import StructuredData from '../components/StructuredData.astro';
import CodeBlockEnhancer from '../components/CodeBlockEnhancer.astro';
import CodeCopyButton from '../components/CodeCopyButton.astro';
import CyberLayout from './CyberLayout.jsx';
import '../styles/globals.css';
import '../styles/code-copy.css';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_KEYWORDS, SITE_LANGUAGE } from '../consts';

interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  image?: string;
  ogType?: string;
  publishedTime?: string;
  modifiedTime?: string;
}

const { 
  title = SITE_TITLE, 
  description = SITE_DESCRIPTION,
  keywords = SITE_KEYWORDS,
  image = '/images/og-image.jpg',
  ogType = 'website',
  publishedTime,
  modifiedTime
} = Astro.props;

// Gerar título completo com o nome do site
const fullTitle = title;
---

<!DOCTYPE html>
<html lang={SITE_LANGUAGE}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content="PRODBYGUS" />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="index, follow" />
    <meta name="theme-color" content="#9f70a9" />
    
    <!-- Links -->
    <link rel="icon" type="image/x-icon" href={new URL('/favicon.ico', Astro.site).toString()} />
    <link rel="shortcut icon" href={new URL('/favicon.ico', Astro.site).toString()} />
    <link rel="apple-touch-icon" href={new URL('/icons/icon-192x192.png', Astro.site).toString()} />
    <link rel="manifest" href={new URL('/manifest.json', Astro.site).toString()} />
    <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
    
    <!-- Preconnect para Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Fira Code - Fonte principal -->
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site).toString()} />
    <meta property="og:site_name" content="PRODBYGUS" />
    <meta property="og:locale" content={SITE_LANGUAGE} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={fullTitle} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.site).toString()} />
    <meta property="twitter:creator" content="@prodbygus" />
    
    <!-- Additional SEO Meta Tags -->
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="PRODBYGUS" />
    <meta name="application-name" content="PRODBYGUS" />
    <meta name="msapplication-TileColor" content="#9f70a9" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    
    <title>{fullTitle}</title>
    
    <script is:inline>
      // Detectar preferência de tema escuro/claro do sistema
      const theme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      document.documentElement.classList.toggle('light-theme', theme === 'light');
    </script>
    
    <StructuredData
      title={fullTitle}
      description={description}
      image={new URL(image, Astro.site).toString()}
      type={ogType}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
    />
  </head>
  <body>
    <CyberLayout client:only="react">
      <slot />
    </CyberLayout>
    
    <!-- Adicionar o componente para melhorar os blocos de código -->
    <CodeBlockEnhancer />
    <!-- Adicionar o componente para botões de cópia em todos os blocos de código -->
    <CodeCopyButton />
    
    <!-- Script direto para garantir a adição dos botões de cópia -->
    <script is:inline>
      // Função para adicionar botões de cópia a todos os blocos de código
      function ensureCopyButtons() {
        console.log('Garantindo botões de cópia para todos os blocos...');
        const codeBlocks = document.querySelectorAll('pre');
        
        codeBlocks.forEach((pre) => {
          // Remover qualquer botão existente para evitar duplicação
          pre.querySelectorAll('.copy-button').forEach(btn => btn.remove());
          
          // Garantir que o pre tenha position: relative
          pre.style.position = 'relative';
          
          // Criar o botão de cópia
          const copyButton = document.createElement('button');
          copyButton.className = 'copy-button';
          copyButton.textContent = 'Copiar';
          
          // Adicionar funcionalidade de cópia
          copyButton.addEventListener('click', async () => {
            const code = pre.querySelector('code');
            if (!code) return;
            
            try {
              await navigator.clipboard.writeText(code.textContent || '');
              copyButton.textContent = 'Copiado!';
              copyButton.classList.add('success');
              
              setTimeout(() => {
                copyButton.textContent = 'Copiar';
                copyButton.classList.remove('success');
              }, 2000);
            } catch (err) {
              copyButton.textContent = 'Erro!';
              copyButton.classList.add('error');
              
              setTimeout(() => {
                copyButton.textContent = 'Copiar';
                copyButton.classList.remove('error');
              }, 2000);
            }
          });
          
          // Adicionar o botão ao bloco de código
          pre.appendChild(copyButton);
        });
      }
      
      // Executar a função quando o documento estiver pronto
      document.addEventListener('DOMContentLoaded', ensureCopyButtons);
      
      // Executar novamente quando a página estiver totalmente carregada
      window.addEventListener('load', ensureCopyButtons);
      
      // Executar periodicamente para garantir que todos os blocos de código tenham botões
      setInterval(ensureCopyButtons, 3000);
    </script>
  </body>
</html> 